/* Generated by JTB 1.4.11 */
/**
 * JTB template file created by SF JavaCC plugin 1.5.28+ wizard for JTB 1.4.0.2+ and JavaCC 1.5.0+
 */
options
{
// debug_parser = true;
unicode_input = true;
    // JTB_P   // =   // "grammar"  // ;
  static = false;
}

PARSER_BEGIN(PDLGrammar)
package grammar;

import grammar.visitor.*;
import java.io.FileInputStream;
import java.io.File;
import grammar.syntaxtree.*;


public class PDLGrammar {

  /* --- User code --- */

  public static void main(String args[]) {
    if (args.length != 1) {
      System.out.println("Argument(s) Error!");
      return;
    }
    try {
      PDLGrammar pdlParser = new PDLGrammar(new FileInputStream(new File(args[0])));
      Start start = pdlParser.Start();
      start.accept(new DepthFirstVoidVisitor());
      System.out.println("Parse OK!");
    }
    catch (Exception e) {
      System.out.println("Parse Error!");
      System.out.println(e.getMessage());
    }
  }
}


class MyVisitor extends DepthFirstVoidVisitor {

  /* --- User code --- */

  public void visit(NodeToken n) {
    System.out.println("visit " + n.tokenImage);
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token tok) {
    final NodeToken node = new NodeToken(tok.image.intern(), tok.kind, tok.beginLine, tok.beginColumn, tok.endLine, tok.endColumn);
    if (tok.specialToken == null)
      return node;
    Token t = tok;
    int nbt = 0;
    while (t.specialToken != null) {
      t = t.specialToken;
      nbt++;
    }
    final java.util.ArrayList<NodeToken> temp = new java.util.ArrayList<NodeToken>(nbt);
    t = tok;
    while (t.specialToken != null) {
      t = t.specialToken;
      temp.add(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
    }
    for (int i = nbt - 1; i >= 0; --i)
      node.addSpecial(temp.get(i));
    // node.trimSpecials();
    return node;
  }
}

PARSER_END(PDLGrammar)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" ( ~["\n", "\r"] )* ( "\n"| "\r"| "\r\n" ) >
| < "/*" ( ~["*"] )* "*" ( "*"| ~["*", "/"] ( ~["*"] )* "*" )* "/" >
}

TOKEN :
/* KEYWORDS */
{
  < INPUT : "#input" >
| < REQUIRED : "#required" >
| < OBJECTIVE : "#objective" >
| < OUTPUT : "#output" >
| < INT : "int" >
| < REAL : "real" >
| < BOOL : "bool" >
| < CHAR : "char" >
| < FUNCTION : "function" >
| < OF : "of" >
| < IN : "in" >
| < AND : "and" >
| < OR : "or" >
| < NOT : "not" >
| < XOR : "xor" >
| < MOD : "mod" >
| < IF : "if" >
| < ELSE : "else" >
| < FORALL : "forall" >
| < EXISTS : "exists" >
| < SUMMATION : "summation" >
| < PRODUCT : "product" >
| < COUNT : "count" >
| < MIN : "min" >
| < MAX : "max" >
| < MINIMIZE : "minimize" >
| < MAXIMIZE : "maximize" >
| < ALLDIFF : "alldiff" >
}

TOKEN :
/* LITERALS */
{
  < INT_LITERAL : "0"| ["1"-"9"] ( ["0"-"9"] )* >
| < REAL_LITERAL : <FIXED_LITERAL> ( ["e", "E"] ( ["+", "-"] )? <INT_LITERAL> )? >
| < BOOL_LITERAL : ( "ture"| "false" ) >
| < CHAR_LITERAL : "'" ( ( ~["'", "\\", "\n", "\r"] )| ( "\\" ( ["n", "t", "b", "r", "f", "\\", "'", "\""]| ["0"-"7"] ( ["0"-"7"] )?| ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) ) "'" >
| < STRING_LITERAL : "\"" ( <CHAR_LITERAL> )* "\"" >
| < #FIXED_LITERAL : <INT_LITERAL> "." ( ["0"-"9"] )* >
}

TOKEN :
/* IDENTIFIERS */
{
  < IDENTIFIER : <LETTER> ( <LETTER>| <DIGIT> )* >
| < #LETTER : ["A"-"Z", "a"-"z", "_"] >
| < #DIGIT : ["0"-"9"] >
}

Start Start() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  InputSection n1 = null;
  NodeOptional n2 = new NodeOptional();
  RequiredSection n3 = null;
  NodeOptional n4 = new NodeOptional();
  ObjectiveSection n5 = null;
  NodeOptional n6 = new NodeOptional();
  OutputSection n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  [
    n1 = InputSection()
    { n0.addNode(n1); }
  ]
  [
    n3 = RequiredSection()
    { n2.addNode(n3); }
  ]
  [
    n5 = ObjectiveSection()
    { n4.addNode(n5); }
  ]
  [
    n7 = OutputSection()
    { n6.addNode(n7); }
  ]
  n9 = < EOF >
  {
    n9.beginColumn++;
    n9.endColumn++;
    { n8 = JTBToolkit.makeNodeToken(n9); }
  }
  { return new Start(n0, n2, n4, n6, n8); }
}

InputSection InputSection() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  VarDef n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < INPUT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    { n3 = new NodeSequence(2); }
    n4 = VarDef()
    { n3.addNode(n4); }
    n6 = ";"
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n3.addNode(n5); }
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  { return new InputSection(n0, n2); }
}

RequiredSection RequiredSection() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  Exp n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < REQUIRED >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    { n3 = new NodeSequence(2); }
    n4 = Exp()
    { n3.addNode(n4); }
    n6 = ";"
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n3.addNode(n5); }
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  { return new RequiredSection(n0, n2); }
}

ObjectiveSection ObjectiveSection() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeOptional n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeChoice n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  Exp n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  n1 = < OBJECTIVE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    { n4 = new NodeOptional(); }
    { n3 = new NodeSequence(4); }
    [
      n6 = "@"
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
    ]
    { n3.addNode(n4); }
    (
      (
        n9 = < MINIMIZE >
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n7 = new NodeChoice(n8, 0, 2); }
      |
        n11 = < MAXIMIZE >
        { n10 = JTBToolkit.makeNodeToken(n11); }
        { n7 = new NodeChoice(n10, 1, 2); }
      )
          )
    { n3.addNode(n7); }
    n12 = Exp()
    { n3.addNode(n12); }
    n14 = ";"
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n3.addNode(n13); }
    { n2.addNode(n3); }
  ]
  { return new ObjectiveSection(n0, n2); }
}

OutputSection OutputSection() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  Exp n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < OUTPUT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    { n3 = new NodeSequence(2); }
    n4 = Exp()
    { n3.addNode(n4); }
    n6 = ";"
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n3.addNode(n5); }
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  { return new OutputSection(n0, n2); }
}

VarDef VarDef() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Type n4 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < OF >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Type()
  { return new VarDef(n0, n2, n4); }
}

Type Type() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  PrimType n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Type n5 = null;
  NodeListOptional n6 = new NodeListOptional();
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Type n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeListOptional n13 = new NodeListOptional();
  NodeChoice n14 = null;
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeOptional n18 = null;
  NodeSequence n19 = null;
  Bound n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  Bound n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeSequence n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
}
{
  (
    (
      n1 = PrimType()
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      { n2 = new NodeSequence(4); }
      n4 = "("
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5 = Type()
      { n2.addNode(n5); }
      (
        { n7 = new NodeSequence(2); }
        n9 = ","
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n7.addNode(n8); }
        n10 = Type()
        { n7.addNode(n10); }
        { n6.addNode(n7); }
      )*
      { n6.nodes.trimToSize(); }
      { n2.addNode(n6); }
      n12 = ")"
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n2.addNode(n11); }
      { n0 = new NodeChoice(n2, 1, 2); }
    )
      )
  (
    { n18 = new NodeOptional(); }
    (
      (
        { n15 = new NodeSequence(3); }
        n17 = "["
        { n16 = JTBToolkit.makeNodeToken(n17); }
        { n15.addNode(n16); }
        [
          { n19 = new NodeSequence(3); }
          n20 = Bound()
          { n19.addNode(n20); }
          n22 = "~"
          { n21 = JTBToolkit.makeNodeToken(n22); }
          { n19.addNode(n21); }
          n23 = Bound()
          { n19.addNode(n23); }
          { n18.addNode(n19); }
        ]
        { n15.addNode(n18); }
        n25 = "]"
        { n24 = JTBToolkit.makeNodeToken(n25); }
        { n15.addNode(n24); }
        { n14 = new NodeChoice(n15, 0, 2); }
      |
        { n26 = new NodeSequence(2); }
        n28 = "{"
        { n27 = JTBToolkit.makeNodeToken(n28); }
        { n26.addNode(n27); }
        n30 = "}"
        { n29 = JTBToolkit.makeNodeToken(n30); }
        { n26.addNode(n29); }
        { n14 = new NodeChoice(n26, 1, 2); }
      )
          )
    { n13.addNode(n14); }
  )*
  { n13.nodes.trimToSize(); }
  { return new Type(n0, n13); }
}

PrimType PrimType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeOptional n9 = new NodeOptional();
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  Bound n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  Bound n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
}
{
  (
    (
      n2 = < INT >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 4); }
    |
      n4 = < REAL >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 4); }
    |
      n6 = < BOOL >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 4); }
    |
      n8 = < CHAR >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3, 4); }
    )
      )
  [
    { n10 = new NodeSequence(6); }
    n12 = < IN >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n10.addNode(n11); }
    n14 = "["
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n10.addNode(n13); }
    n15 = Bound()
    { n10.addNode(n15); }
    n17 = ","
    { n16 = JTBToolkit.makeNodeToken(n17); }
    { n10.addNode(n16); }
    n18 = Bound()
    { n10.addNode(n18); }
    n20 = "]"
    { n19 = JTBToolkit.makeNodeToken(n20); }
    { n10.addNode(n19); }
    { n9.addNode(n10); }
  ]
  { return new PrimType(n0, n9); }
}

Bound Bound() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Exp n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
}
{
  (
    n1 = Exp()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n3 = "?"
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new Bound(n0); }
}

FuncDef FuncDef() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  VarList n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  Type n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  Exp n12 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < OF >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < FUNCTION >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n6 = VarList()
  n8 = "->"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  n9 = Type()
  n11 = "="
  { n10 = JTBToolkit.makeNodeToken(n11); }
  n12 = Exp()
  { return new FuncDef(n0, n2, n4, n6, n7, n9, n10, n12); }
}

VarList VarList() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeChoice n6 = null;
  VarDef n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeListOptional n10 = new NodeListOptional();
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeChoice n14 = null;
  VarDef n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
}
{
  (
    n2 = < IDENTIFIER >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n3 = new NodeSequence(4); }
    n5 = "("
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n3.addNode(n4); }
    (
      (
        LOOKAHEAD( 2 )
        n7 = VarDef()
        { n6 = new NodeChoice(n7, 0, 2); }
      |
        n9 = < IDENTIFIER >
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n6 = new NodeChoice(n8, 1, 2); }
      )
          )
    { n3.addNode(n6); }
    (
      { n11 = new NodeSequence(2); }
      n13 = ","
      { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      (
        (
          LOOKAHEAD( 2 )
          n15 = VarDef()
          { n14 = new NodeChoice(n15, 0, 2); }
        |
          n17 = < IDENTIFIER >
          { n16 = JTBToolkit.makeNodeToken(n17); }
          { n14 = new NodeChoice(n16, 1, 2); }
        )
              )
      { n11.addNode(n14); }
      { n10.addNode(n11); }
    )*
    { n10.nodes.trimToSize(); }
    { n3.addNode(n10); }
    n19 = ")"
    { n18 = JTBToolkit.makeNodeToken(n19); }
    { n3.addNode(n18); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new VarList(n0); }
}

Exp Exp() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeChoice n1 = null;
  VarDef n2 = null;
  FuncDef n3 = null;
  NodeSequence n4 = null;
  LogExp n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  VarList n12 = null;
  NodeOptional n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  Exp n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeSequence n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  VarList n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  Exp n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeSequence n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  Exp n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  NodeToken n37 = null;
  Token n38 = null;
  Exp n39 = null;
  NodeToken n40 = null;
  Token n41 = null;
  NodeOptional n42 = new NodeOptional();
  NodeSequence n43 = null;
  NodeToken n44 = null;
  Token n45 = null;
  NodeToken n46 = null;
  Token n47 = null;
  Exp n48 = null;
  NodeToken n49 = null;
  Token n50 = null;
  NodeSequence n51 = null;
  NodeToken n52 = null;
  Token n53 = null;
  Exp n54 = null;
}
{
  (
    LOOKAHEAD( 2 )
    (
      (
        LOOKAHEAD( 3 )
        n2 = VarDef()
        { n1 = new NodeChoice(n2, 0, 2); }
      |
        n3 = FuncDef()
        { n1 = new NodeChoice(n3, 1, 2); }
      )
          )
    { n0 = new NodeChoice(n1, 0, 5); }
  |
    { n4 = new NodeSequence(2); }
    n5 = LogExp()
    { n4.addNode(n5); }
    [
      { n13 = new NodeOptional(); }
      { n7 = new NodeSequence(4); }
      n9 = ":"
      { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n11 = < FORALL >
      { n10 = JTBToolkit.makeNodeToken(n11); }
      { n7.addNode(n10); }
      n12 = VarList()
      { n7.addNode(n12); }
      [
        { n14 = new NodeSequence(3); }
        n16 = "("
        { n15 = JTBToolkit.makeNodeToken(n16); }
        { n14.addNode(n15); }
        n17 = Exp()
        { n14.addNode(n17); }
        n19 = ")"
        { n18 = JTBToolkit.makeNodeToken(n19); }
        { n14.addNode(n18); }
        { n13.addNode(n14); }
      ]
      { n7.addNode(n13); }
      { n6.addNode(n7); }
    ]
    { n4.addNode(n6); }
    { n0 = new NodeChoice(n4, 1, 5); }
  |
    { n20 = new NodeSequence(5); }
    n22 = < EXISTS >
    { n21 = JTBToolkit.makeNodeToken(n22); }
    { n20.addNode(n21); }
    n23 = VarList()
    { n20.addNode(n23); }
    n25 = "("
    { n24 = JTBToolkit.makeNodeToken(n25); }
    { n20.addNode(n24); }
    n26 = Exp()
    { n20.addNode(n26); }
    n28 = ")"
    { n27 = JTBToolkit.makeNodeToken(n28); }
    { n20.addNode(n27); }
    { n0 = new NodeChoice(n20, 2, 5); }
  |
    { n29 = new NodeSequence(8); }
    n31 = < IF >
    { n30 = JTBToolkit.makeNodeToken(n31); }
    { n29.addNode(n30); }
    n33 = "("
    { n32 = JTBToolkit.makeNodeToken(n33); }
    { n29.addNode(n32); }
    n34 = Exp()
    { n29.addNode(n34); }
    n36 = ")"
    { n35 = JTBToolkit.makeNodeToken(n36); }
    { n29.addNode(n35); }
    n38 = "("
    { n37 = JTBToolkit.makeNodeToken(n38); }
    { n29.addNode(n37); }
    n39 = Exp()
    { n29.addNode(n39); }
    n41 = ")"
    { n40 = JTBToolkit.makeNodeToken(n41); }
    { n29.addNode(n40); }
    [
      { n43 = new NodeSequence(4); }
      n45 = < ELSE >
      { n44 = JTBToolkit.makeNodeToken(n45); }
      { n43.addNode(n44); }
      n47 = "("
      { n46 = JTBToolkit.makeNodeToken(n47); }
      { n43.addNode(n46); }
      n48 = Exp()
      { n43.addNode(n48); }
      n50 = ")"
      { n49 = JTBToolkit.makeNodeToken(n50); }
      { n43.addNode(n49); }
      { n42.addNode(n43); }
    ]
    { n29.addNode(n42); }
    { n0 = new NodeChoice(n29, 3, 5); }
  |
    { n51 = new NodeSequence(2); }
    n53 = < ALLDIFF >
    { n52 = JTBToolkit.makeNodeToken(n53); }
    { n51.addNode(n52); }
    n54 = Exp()
    { n51.addNode(n54); }
    { n0 = new NodeChoice(n51, 4, 5); }
  )
  { return new Exp(n0); }
}

LogExp LogExp() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeToken n1 = null;
  Token n2 = null;
  RelExp n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeSequence n5 = null;
  NodeChoice n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  LogExp n13 = null;
}
{
  [
    n2 = < NOT >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0.addNode(n1); }
  ]
  n3 = RelExp()
  [
    { n5 = new NodeSequence(2); }
    (
      (
        n8 = < AND >
        { n7 = JTBToolkit.makeNodeToken(n8); }
        { n6 = new NodeChoice(n7, 0, 3); }
      |
        n10 = < OR >
        { n9 = JTBToolkit.makeNodeToken(n10); }
        { n6 = new NodeChoice(n9, 1, 3); }
      |
        n12 = < XOR >
        { n11 = JTBToolkit.makeNodeToken(n12); }
        { n6 = new NodeChoice(n11, 2, 3); }
      )
          )
    { n5.addNode(n6); }
    n13 = LogExp()
    { n5.addNode(n13); }
    { n4.addNode(n5); }
  ]
  { return new LogExp(n0, n3, n4); }
}

RelExp RelExp() :
{
  // --- JTB generated node declarations ---
  AddExp n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  AddExp n18 = null;
}
{
  n0 = AddExp()
  [
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = "="
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 7); }
      |
        n7 = "!="
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 7); }
      |
        n9 = ">"
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n3 = new NodeChoice(n8, 2, 7); }
      |
        n11 = "<"
        { n10 = JTBToolkit.makeNodeToken(n11); }
        { n3 = new NodeChoice(n10, 3, 7); }
      |
        n13 = ">="
        { n12 = JTBToolkit.makeNodeToken(n13); }
        { n3 = new NodeChoice(n12, 4, 7); }
      |
        n15 = "<="
        { n14 = JTBToolkit.makeNodeToken(n15); }
        { n3 = new NodeChoice(n14, 5, 7); }
      |
        n17 = < IN >
        { n16 = JTBToolkit.makeNodeToken(n17); }
        { n3 = new NodeChoice(n16, 6, 7); }
      )
          )
    { n2.addNode(n3); }
    n18 = AddExp()
    { n2.addNode(n18); }
    { n1.addNode(n2); }
  ]
  { return new RelExp(n0, n1); }
}

AddExp AddExp() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeChoice n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  MulExp n6 = null;
  NodeOptional n7 = new NodeOptional();
  NodeSequence n8 = null;
  NodeChoice n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  AddExp n14 = null;
}
{
  [
    (
      n3 = "+"
      { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1 = new NodeChoice(n2, 0, 2); }
    |
      n5 = "-"
      { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1 = new NodeChoice(n4, 1, 2); }
    )
    { n0.addNode(n1); }
  ]
  n6 = MulExp()
  [
    { n8 = new NodeSequence(2); }
    (
      (
        n11 = "+"
        { n10 = JTBToolkit.makeNodeToken(n11); }
        { n9 = new NodeChoice(n10, 0, 2); }
      |
        n13 = "-"
        { n12 = JTBToolkit.makeNodeToken(n13); }
        { n9 = new NodeChoice(n12, 1, 2); }
      )
          )
    { n8.addNode(n9); }
    n14 = AddExp()
    { n8.addNode(n14); }
    { n7.addNode(n8); }
  ]
  { return new AddExp(n0, n6, n7); }
}

MulExp MulExp() :
{
  // --- JTB generated node declarations ---
  PowExp n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  MulExp n12 = null;
}
{
  n0 = PowExp()
  [
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = "*"
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 4); }
      |
        n7 = "/"
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 4); }
      |
        n9 = "\\"
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n3 = new NodeChoice(n8, 2, 4); }
      |
        n11 = < MOD >
        { n10 = JTBToolkit.makeNodeToken(n11); }
        { n3 = new NodeChoice(n10, 3, 4); }
      )
          )
    { n2.addNode(n3); }
    n12 = MulExp()
    { n2.addNode(n12); }
    { n1.addNode(n2); }
  ]
  { return new MulExp(n0, n1); }
}

PowExp PowExp() :
{
  // --- JTB generated node declarations ---
  ItemExp n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  PowExp n5 = null;
}
{
  n0 = ItemExp()
  [
    { n2 = new NodeSequence(2); }
    n4 = "^"
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = PowExp()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  ]
  { return new PowExp(n0, n1); }
}

ItemExp ItemExp() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Literal n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeChoice n6 = null;
  NodeList n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  Exp n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  Exp n17 = null;
  NodeListOptional n18 = null;
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  Exp n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeSequence n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  Exp n28 = null;
  NodeListOptional n29 = new NodeListOptional();
  NodeSequence n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  Exp n33 = null;
  NodeToken n34 = null;
  Token n35 = null;
  NodeSequence n36 = null;
  NodeToken n37 = null;
  Token n38 = null;
  Exp n39 = null;
  NodeToken n40 = null;
  Token n41 = null;
  NodeSequence n42 = null;
  NodeToken n43 = null;
  Token n44 = null;
  Exp n45 = null;
  NodeToken n46 = null;
  Token n47 = null;
  NodeSequence n48 = null;
  NodeToken n49 = null;
  Token n50 = null;
  ItemExp n51 = null;
  NodeSequence n52 = null;
  NodeToken n53 = null;
  Token n54 = null;
  ItemExp n55 = null;
  NodeSequence n56 = null;
  NodeToken n57 = null;
  Token n58 = null;
  ItemExp n59 = null;
  NodeSequence n60 = null;
  NodeToken n61 = null;
  Token n62 = null;
  ItemExp n63 = null;
  NodeSequence n64 = null;
  NodeToken n65 = null;
  Token n66 = null;
  ItemExp n67 = null;
}
{
  (
    n1 = Literal()
    { n0 = new NodeChoice(n1, 0, 10); }
  |
    { n2 = new NodeSequence(2); }
    n4 = < IDENTIFIER >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    [
      { n7 = new NodeList(); }
      { n18 = new NodeListOptional(); }
      (
        (
          { n8 = new NodeSequence(3); }
          n10 = "["
          { n9 = JTBToolkit.makeNodeToken(n10); }
          { n8.addNode(n9); }
          n11 = Exp()
          { n8.addNode(n11); }
          n13 = "]"
          { n12 = JTBToolkit.makeNodeToken(n13); }
          { n8.addNode(n12); }
          { n7.addNode(n8); }
        )+
        { n7.nodes.trimToSize(); }
        { n6 = new NodeChoice(n7, 0, 2); }
      |
        { n14 = new NodeSequence(4); }
        n16 = "("
        { n15 = JTBToolkit.makeNodeToken(n16); }
        { n14.addNode(n15); }
        n17 = Exp()
        { n14.addNode(n17); }
        (
          { n19 = new NodeSequence(2); }
          n21 = ","
          { n20 = JTBToolkit.makeNodeToken(n21); }
          { n19.addNode(n20); }
          n22 = Exp()
          { n19.addNode(n22); }
          { n18.addNode(n19); }
        )*
        { n18.nodes.trimToSize(); }
        { n14.addNode(n18); }
        n24 = ")"
        { n23 = JTBToolkit.makeNodeToken(n24); }
        { n14.addNode(n23); }
        { n6 = new NodeChoice(n14, 1, 2); }
      )
      { n5.addNode(n6); }
    ]
    { n2.addNode(n5); }
    { n0 = new NodeChoice(n2, 1, 10); }
  |
    { n25 = new NodeSequence(4); }
    n27 = "("
    { n26 = JTBToolkit.makeNodeToken(n27); }
    { n25.addNode(n26); }
    n28 = Exp()
    { n25.addNode(n28); }
    (
      { n30 = new NodeSequence(2); }
      n32 = ","
      { n31 = JTBToolkit.makeNodeToken(n32); }
      { n30.addNode(n31); }
      n33 = Exp()
      { n30.addNode(n33); }
      { n29.addNode(n30); }
    )*
    { n29.nodes.trimToSize(); }
    { n25.addNode(n29); }
    n35 = ")"
    { n34 = JTBToolkit.makeNodeToken(n35); }
    { n25.addNode(n34); }
    { n0 = new NodeChoice(n25, 2, 10); }
  |
    { n36 = new NodeSequence(3); }
    n38 = "{"
    { n37 = JTBToolkit.makeNodeToken(n38); }
    { n36.addNode(n37); }
    n39 = Exp()
    { n36.addNode(n39); }
    n41 = "}"
    { n40 = JTBToolkit.makeNodeToken(n41); }
    { n36.addNode(n40); }
    { n0 = new NodeChoice(n36, 3, 10); }
  |
    { n42 = new NodeSequence(3); }
    n44 = "["
    { n43 = JTBToolkit.makeNodeToken(n44); }
    { n42.addNode(n43); }
    n45 = Exp()
    { n42.addNode(n45); }
    n47 = "]"
    { n46 = JTBToolkit.makeNodeToken(n47); }
    { n42.addNode(n46); }
    { n0 = new NodeChoice(n42, 4, 10); }
  |
    { n48 = new NodeSequence(2); }
    n50 = < SUMMATION >
    { n49 = JTBToolkit.makeNodeToken(n50); }
    { n48.addNode(n49); }
    n51 = ItemExp()
    { n48.addNode(n51); }
    { n0 = new NodeChoice(n48, 5, 10); }
  |
    { n52 = new NodeSequence(2); }
    n54 = < PRODUCT >
    { n53 = JTBToolkit.makeNodeToken(n54); }
    { n52.addNode(n53); }
    n55 = ItemExp()
    { n52.addNode(n55); }
    { n0 = new NodeChoice(n52, 6, 10); }
  |
    { n56 = new NodeSequence(2); }
    n58 = < COUNT >
    { n57 = JTBToolkit.makeNodeToken(n58); }
    { n56.addNode(n57); }
    n59 = ItemExp()
    { n56.addNode(n59); }
    { n0 = new NodeChoice(n56, 7, 10); }
  |
    { n60 = new NodeSequence(2); }
    n62 = < MAX >
    { n61 = JTBToolkit.makeNodeToken(n62); }
    { n60.addNode(n61); }
    n63 = ItemExp()
    { n60.addNode(n63); }
    { n0 = new NodeChoice(n60, 8, 10); }
  |
    { n64 = new NodeSequence(2); }
    n66 = < MIN >
    { n65 = JTBToolkit.makeNodeToken(n66); }
    { n64.addNode(n65); }
    n67 = ItemExp()
    { n64.addNode(n67); }
    { n0 = new NodeChoice(n64, 9, 10); }
  )
  { return new ItemExp(n0); }
}

Literal Literal() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
}
{
  (
    n2 = < INT_LITERAL >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 5); }
  |
    n4 = < REAL_LITERAL >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 5); }
  |
    n6 = < BOOL_LITERAL >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 5); }
  |
    n8 = < CHAR_LITERAL >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n0 = new NodeChoice(n7, 3, 5); }
  |
    n10 = < STRING_LITERAL >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n0 = new NodeChoice(n9, 4, 5); }
  )
  { return new Literal(n0); }
}
