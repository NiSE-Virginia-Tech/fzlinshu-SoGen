/* Generated By:JavaCC: Do not edit this line. PDLGrammar.java */
package grammar;

import grammar.visitor.*;
import java.io.FileInputStream;
import java.io.File;
import grammar.syntaxtree.*;


public class PDLGrammar implements PDLGrammarConstants {

  /* --- User code --- */

  public static void main(String args[]) {
    if (args.length != 1) {
      System.out.println("Argument(s) Error!");
      return;
    }
    try {
      PDLGrammar pdlParser = new PDLGrammar(new FileInputStream(new File(args[0])));
      Start start = pdlParser.Start();
      start.accept(new DepthFirstVoidVisitor());
      System.out.println("Parse OK!");
    }
    catch (Exception e) {
      System.out.println("Parse Error!");
      System.out.println(e.getMessage());
    }
  }

  final public Start Start() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  InputSection n1 = null;
  NodeOptional n2 = new NodeOptional();
  RequiredSection n3 = null;
  NodeOptional n4 = new NodeOptional();
  ObjectiveSection n5 = null;
  NodeOptional n6 = new NodeOptional();
  OutputSection n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
      n1 = InputSection();
      n0.addNode(n1);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REQUIRED:
      n3 = RequiredSection();
      n2.addNode(n3);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECTIVE:
      n5 = ObjectiveSection();
      n4.addNode(n5);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OUTPUT:
      n7 = OutputSection();
      n6.addNode(n7);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    n9 = jj_consume_token(0);
    n9.beginColumn++;
    n9.endColumn++;
    { n8 = JTBToolkit.makeNodeToken(n9); }
    {if (true) return new Start(n0, n2, n4, n6, n8);}
    throw new Error("Missing return statement in function");
  }

  final public InputSection InputSection() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  VarDef n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    n1 = jj_consume_token(INPUT);
    n0 = JTBToolkit.makeNodeToken(n1);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      n3 = new NodeSequence(2);
      n4 = VarDef();
      n3.addNode(n4);
      n6 = jj_consume_token(44);
      n5 = JTBToolkit.makeNodeToken(n6);
      n3.addNode(n5);
      n2.addNode(n3);
    }
    n2.nodes.trimToSize();
    {if (true) return new InputSection(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public RequiredSection RequiredSection() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  Exp n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    n1 = jj_consume_token(REQUIRED);
    n0 = JTBToolkit.makeNodeToken(n1);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case IF:
      case EXISTS:
      case SUMMATION:
      case PRODUCT:
      case COUNT:
      case MIN:
      case MAX:
      case ALLDIFF:
      case INT_LITERAL:
      case REAL_LITERAL:
      case BOOL_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 46:
      case 49:
      case 52:
      case 63:
      case 64:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      n3 = new NodeSequence(2);
      n4 = Exp();
      n3.addNode(n4);
      n6 = jj_consume_token(44);
      n5 = JTBToolkit.makeNodeToken(n6);
      n3.addNode(n5);
      n2.addNode(n3);
    }
    n2.nodes.trimToSize();
    {if (true) return new RequiredSection(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public ObjectiveSection ObjectiveSection() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeOptional n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeChoice n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  Exp n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
    n1 = jj_consume_token(OBJECTIVE);
    n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINIMIZE:
    case MAXIMIZE:
    case 45:
      n4 = new NodeOptional();
      n3 = new NodeSequence(4);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        n6 = jj_consume_token(45);
        n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      n3.addNode(n4);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINIMIZE:
        n9 = jj_consume_token(MINIMIZE);
          n8 = JTBToolkit.makeNodeToken(n9);
          n7 = new NodeChoice(n8, 0, 2);
        break;
      case MAXIMIZE:
        n11 = jj_consume_token(MAXIMIZE);
          n10 = JTBToolkit.makeNodeToken(n11);
          n7 = new NodeChoice(n10, 1, 2);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n3.addNode(n7);
      n12 = Exp();
      n3.addNode(n12);
      n14 = jj_consume_token(44);
      n13 = JTBToolkit.makeNodeToken(n14);
      n3.addNode(n13);
      n2.addNode(n3);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    {if (true) return new ObjectiveSection(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public OutputSection OutputSection() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  Exp n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    n1 = jj_consume_token(OUTPUT);
    n0 = JTBToolkit.makeNodeToken(n1);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case IF:
      case EXISTS:
      case SUMMATION:
      case PRODUCT:
      case COUNT:
      case MIN:
      case MAX:
      case ALLDIFF:
      case INT_LITERAL:
      case REAL_LITERAL:
      case BOOL_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 46:
      case 49:
      case 52:
      case 63:
      case 64:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      n3 = new NodeSequence(2);
      n4 = Exp();
      n3.addNode(n4);
      n6 = jj_consume_token(44);
      n5 = JTBToolkit.makeNodeToken(n6);
      n3.addNode(n5);
      n2.addNode(n3);
    }
    n2.nodes.trimToSize();
    {if (true) return new OutputSection(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public VarDef VarDef() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Type n4 = null;
    n1 = jj_consume_token(IDENTIFIER);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(OF);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Type();
    {if (true) return new VarDef(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  PrimType n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Type n5 = null;
  NodeListOptional n6 = new NodeListOptional();
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Type n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeListOptional n13 = new NodeListOptional();
  NodeChoice n14 = null;
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeOptional n18 = null;
  NodeSequence n19 = null;
  Bound n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  Bound n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeSequence n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case REAL:
    case BOOL:
    case CHAR:
      n1 = PrimType();
        n0 = new NodeChoice(n1, 0, 2);
      break;
    case 46:
        n2 = new NodeSequence(4);
      n4 = jj_consume_token(46);
        n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Type();
        n2.addNode(n5);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 47:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
          n7 = new NodeSequence(2);
        n9 = jj_consume_token(47);
          n8 = JTBToolkit.makeNodeToken(n9);
          n7.addNode(n8);
        n10 = Type();
          n7.addNode(n10);
          n6.addNode(n7);
      }
        n6.nodes.trimToSize();
        n2.addNode(n6);
      n12 = jj_consume_token(48);
        n11 = JTBToolkit.makeNodeToken(n12);
        n2.addNode(n11);
        n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
      case 52:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      n18 = new NodeOptional();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
          n15 = new NodeSequence(3);
        n17 = jj_consume_token(49);
          n16 = JTBToolkit.makeNodeToken(n17);
          n15.addNode(n16);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
        case IF:
        case EXISTS:
        case SUMMATION:
        case PRODUCT:
        case COUNT:
        case MIN:
        case MAX:
        case ALLDIFF:
        case INT_LITERAL:
        case REAL_LITERAL:
        case BOOL_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 46:
        case 49:
        case 52:
        case 54:
        case 63:
        case 64:
            n19 = new NodeSequence(3);
          n20 = Bound();
            n19.addNode(n20);
          n22 = jj_consume_token(50);
            n21 = JTBToolkit.makeNodeToken(n22);
            n19.addNode(n21);
          n23 = Bound();
            n19.addNode(n23);
            n18.addNode(n19);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
          n15.addNode(n18);
        n25 = jj_consume_token(51);
          n24 = JTBToolkit.makeNodeToken(n25);
          n15.addNode(n24);
          n14 = new NodeChoice(n15, 0, 2);
        break;
      case 52:
          n26 = new NodeSequence(2);
        n28 = jj_consume_token(52);
          n27 = JTBToolkit.makeNodeToken(n28);
          n26.addNode(n27);
        n30 = jj_consume_token(53);
          n29 = JTBToolkit.makeNodeToken(n30);
          n26.addNode(n29);
          n14 = new NodeChoice(n26, 1, 2);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n13.addNode(n14);
    }
    n13.nodes.trimToSize();
    {if (true) return new Type(n0, n13);}
    throw new Error("Missing return statement in function");
  }

  final public PrimType PrimType() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeOptional n9 = new NodeOptional();
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  Bound n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  Bound n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      n2 = jj_consume_token(INT);
        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0, 4);
      break;
    case REAL:
      n4 = jj_consume_token(REAL);
        n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1, 4);
      break;
    case BOOL:
      n6 = jj_consume_token(BOOL);
        n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2, 4);
      break;
    case CHAR:
      n8 = jj_consume_token(CHAR);
        n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3, 4);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
      n10 = new NodeSequence(6);
      n12 = jj_consume_token(IN);
      n11 = JTBToolkit.makeNodeToken(n12);
      n10.addNode(n11);
      n14 = jj_consume_token(49);
      n13 = JTBToolkit.makeNodeToken(n14);
      n10.addNode(n13);
      n15 = Bound();
      n10.addNode(n15);
      n17 = jj_consume_token(47);
      n16 = JTBToolkit.makeNodeToken(n17);
      n10.addNode(n16);
      n18 = Bound();
      n10.addNode(n18);
      n20 = jj_consume_token(51);
      n19 = JTBToolkit.makeNodeToken(n20);
      n10.addNode(n19);
      n9.addNode(n10);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    {if (true) return new PrimType(n0, n9);}
    throw new Error("Missing return statement in function");
  }

  final public Bound Bound() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Exp n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case IF:
    case EXISTS:
    case SUMMATION:
    case PRODUCT:
    case COUNT:
    case MIN:
    case MAX:
    case ALLDIFF:
    case INT_LITERAL:
    case REAL_LITERAL:
    case BOOL_LITERAL:
    case CHAR_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 46:
    case 49:
    case 52:
    case 63:
    case 64:
      n1 = Exp();
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case 54:
      n3 = jj_consume_token(54);
      n2 = JTBToolkit.makeNodeToken(n3);
      n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Bound(n0);}
    throw new Error("Missing return statement in function");
  }

  final public FuncDef FuncDef() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  VarList n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  Type n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  Exp n12 = null;
    n1 = jj_consume_token(IDENTIFIER);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(OF);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(FUNCTION);
    n4 = JTBToolkit.makeNodeToken(n5);
    n6 = VarList();
    n8 = jj_consume_token(55);
    n7 = JTBToolkit.makeNodeToken(n8);
    n9 = Type();
    n11 = jj_consume_token(56);
    n10 = JTBToolkit.makeNodeToken(n11);
    n12 = Exp();
    {if (true) return new FuncDef(n0, n2, n4, n6, n7, n9, n10, n12);}
    throw new Error("Missing return statement in function");
  }

  final public VarList VarList() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeChoice n6 = null;
  VarDef n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeListOptional n10 = new NodeListOptional();
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeChoice n14 = null;
  VarDef n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n2 = jj_consume_token(IDENTIFIER);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case 46:
      n3 = new NodeSequence(4);
      n5 = jj_consume_token(46);
      n4 = JTBToolkit.makeNodeToken(n5);
      n3.addNode(n4);
      if (jj_2_1(2)) {
        n7 = VarDef();
          n6 = new NodeChoice(n7, 0, 2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          n9 = jj_consume_token(IDENTIFIER);
          n8 = JTBToolkit.makeNodeToken(n9);
          n6 = new NodeChoice(n8, 1, 2);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      n3.addNode(n6);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 47:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_6;
        }
        n11 = new NodeSequence(2);
        n13 = jj_consume_token(47);
        n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
        if (jj_2_2(2)) {
          n15 = VarDef();
            n14 = new NodeChoice(n15, 0, 2);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            n17 = jj_consume_token(IDENTIFIER);
            n16 = JTBToolkit.makeNodeToken(n17);
            n14 = new NodeChoice(n16, 1, 2);
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        n11.addNode(n14);
        n10.addNode(n11);
      }
      n10.nodes.trimToSize();
      n3.addNode(n10);
      n19 = jj_consume_token(48);
      n18 = JTBToolkit.makeNodeToken(n19);
      n3.addNode(n18);
      n0 = new NodeChoice(n3, 1, 2);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new VarList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Exp Exp() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeChoice n1 = null;
  VarDef n2 = null;
  FuncDef n3 = null;
  NodeSequence n4 = null;
  LogExp n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  VarList n12 = null;
  NodeOptional n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  Exp n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeSequence n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  VarList n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  Exp n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeSequence n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  Exp n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  NodeToken n37 = null;
  Token n38 = null;
  Exp n39 = null;
  NodeToken n40 = null;
  Token n41 = null;
  NodeOptional n42 = new NodeOptional();
  NodeSequence n43 = null;
  NodeToken n44 = null;
  Token n45 = null;
  NodeToken n46 = null;
  Token n47 = null;
  Exp n48 = null;
  NodeToken n49 = null;
  Token n50 = null;
  NodeSequence n51 = null;
  NodeToken n52 = null;
  Token n53 = null;
  Exp n54 = null;
    if (jj_2_4(2)) {
      if (jj_2_3(3)) {
        n2 = VarDef();
          n1 = new NodeChoice(n2, 0, 2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          n3 = FuncDef();
          n1 = new NodeChoice(n3, 1, 2);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      n0 = new NodeChoice(n1, 0, 5);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case SUMMATION:
      case PRODUCT:
      case COUNT:
      case MIN:
      case MAX:
      case INT_LITERAL:
      case REAL_LITERAL:
      case BOOL_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 46:
      case 49:
      case 52:
      case 63:
      case 64:
      n4 = new NodeSequence(2);
        n5 = LogExp();
      n4.addNode(n5);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 57:
        n13 = new NodeOptional();
        n7 = new NodeSequence(4);
          n9 = jj_consume_token(57);
        n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
          n11 = jj_consume_token(FORALL);
        n10 = JTBToolkit.makeNodeToken(n11);
        n7.addNode(n10);
          n12 = VarList();
        n7.addNode(n12);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 46:
          n14 = new NodeSequence(3);
            n16 = jj_consume_token(46);
          n15 = JTBToolkit.makeNodeToken(n16);
          n14.addNode(n15);
            n17 = Exp();
          n14.addNode(n17);
            n19 = jj_consume_token(48);
          n18 = JTBToolkit.makeNodeToken(n19);
          n14.addNode(n18);
          n13.addNode(n14);
            break;
          default:
            jj_la1[23] = jj_gen;
            ;
          }
        n7.addNode(n13);
        n6.addNode(n7);
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
      n4.addNode(n6);
      n0 = new NodeChoice(n4, 1, 5);
        break;
      case EXISTS:
      n20 = new NodeSequence(5);
        n22 = jj_consume_token(EXISTS);
      n21 = JTBToolkit.makeNodeToken(n22);
      n20.addNode(n21);
        n23 = VarList();
      n20.addNode(n23);
        n25 = jj_consume_token(46);
      n24 = JTBToolkit.makeNodeToken(n25);
      n20.addNode(n24);
        n26 = Exp();
      n20.addNode(n26);
        n28 = jj_consume_token(48);
      n27 = JTBToolkit.makeNodeToken(n28);
      n20.addNode(n27);
      n0 = new NodeChoice(n20, 2, 5);
        break;
      case IF:
      n29 = new NodeSequence(8);
        n31 = jj_consume_token(IF);
      n30 = JTBToolkit.makeNodeToken(n31);
      n29.addNode(n30);
        n33 = jj_consume_token(46);
      n32 = JTBToolkit.makeNodeToken(n33);
      n29.addNode(n32);
        n34 = Exp();
      n29.addNode(n34);
        n36 = jj_consume_token(48);
      n35 = JTBToolkit.makeNodeToken(n36);
      n29.addNode(n35);
        n38 = jj_consume_token(46);
      n37 = JTBToolkit.makeNodeToken(n38);
      n29.addNode(n37);
        n39 = Exp();
      n29.addNode(n39);
        n41 = jj_consume_token(48);
      n40 = JTBToolkit.makeNodeToken(n41);
      n29.addNode(n40);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
        n43 = new NodeSequence(4);
          n45 = jj_consume_token(ELSE);
        n44 = JTBToolkit.makeNodeToken(n45);
        n43.addNode(n44);
          n47 = jj_consume_token(46);
        n46 = JTBToolkit.makeNodeToken(n47);
        n43.addNode(n46);
          n48 = Exp();
        n43.addNode(n48);
          n50 = jj_consume_token(48);
        n49 = JTBToolkit.makeNodeToken(n50);
        n43.addNode(n49);
        n42.addNode(n43);
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
      n29.addNode(n42);
      n0 = new NodeChoice(n29, 3, 5);
        break;
      case ALLDIFF:
      n51 = new NodeSequence(2);
        n53 = jj_consume_token(ALLDIFF);
      n52 = JTBToolkit.makeNodeToken(n53);
      n51.addNode(n52);
        n54 = Exp();
      n51.addNode(n54);
      n0 = new NodeChoice(n51, 4, 5);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new Exp(n0);}
    throw new Error("Missing return statement in function");
  }

  final public LogExp LogExp() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeToken n1 = null;
  Token n2 = null;
  RelExp n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeSequence n5 = null;
  NodeChoice n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  LogExp n13 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      n2 = jj_consume_token(NOT);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0.addNode(n1);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    n3 = RelExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case OR:
    case XOR:
      n5 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        n8 = jj_consume_token(AND);
          n7 = JTBToolkit.makeNodeToken(n8);
          n6 = new NodeChoice(n7, 0, 3);
        break;
      case OR:
        n10 = jj_consume_token(OR);
          n9 = JTBToolkit.makeNodeToken(n10);
          n6 = new NodeChoice(n9, 1, 3);
        break;
      case XOR:
        n12 = jj_consume_token(XOR);
          n11 = JTBToolkit.makeNodeToken(n12);
          n6 = new NodeChoice(n11, 2, 3);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n5.addNode(n6);
      n13 = LogExp();
      n5.addNode(n13);
      n4.addNode(n5);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    {if (true) return new LogExp(n0, n3, n4);}
    throw new Error("Missing return statement in function");
  }

  final public RelExp RelExp() throws ParseException {
  // --- JTB generated node declarations ---
  AddExp n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  AddExp n18 = null;
    n0 = AddExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
    case 56:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
      n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
        n5 = jj_consume_token(56);
          n4 = JTBToolkit.makeNodeToken(n5);
          n3 = new NodeChoice(n4, 0, 7);
        break;
      case 58:
        n7 = jj_consume_token(58);
          n6 = JTBToolkit.makeNodeToken(n7);
          n3 = new NodeChoice(n6, 1, 7);
        break;
      case 59:
        n9 = jj_consume_token(59);
          n8 = JTBToolkit.makeNodeToken(n9);
          n3 = new NodeChoice(n8, 2, 7);
        break;
      case 60:
        n11 = jj_consume_token(60);
          n10 = JTBToolkit.makeNodeToken(n11);
          n3 = new NodeChoice(n10, 3, 7);
        break;
      case 61:
        n13 = jj_consume_token(61);
          n12 = JTBToolkit.makeNodeToken(n13);
          n3 = new NodeChoice(n12, 4, 7);
        break;
      case 62:
        n15 = jj_consume_token(62);
          n14 = JTBToolkit.makeNodeToken(n15);
          n3 = new NodeChoice(n14, 5, 7);
        break;
      case IN:
        n17 = jj_consume_token(IN);
          n16 = JTBToolkit.makeNodeToken(n17);
          n3 = new NodeChoice(n16, 6, 7);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
      n18 = AddExp();
      n2.addNode(n18);
      n1.addNode(n2);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    {if (true) return new RelExp(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public AddExp AddExp() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeChoice n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  MulExp n6 = null;
  NodeOptional n7 = new NodeOptional();
  NodeSequence n8 = null;
  NodeChoice n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  AddExp n14 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 63:
    case 64:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 63:
        n3 = jj_consume_token(63);
        n2 = JTBToolkit.makeNodeToken(n3);
        n1 = new NodeChoice(n2, 0, 2);
        break;
      case 64:
        n5 = jj_consume_token(64);
        n4 = JTBToolkit.makeNodeToken(n5);
        n1 = new NodeChoice(n4, 1, 2);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n0.addNode(n1);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    n6 = MulExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 63:
    case 64:
      n8 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 63:
        n11 = jj_consume_token(63);
          n10 = JTBToolkit.makeNodeToken(n11);
          n9 = new NodeChoice(n10, 0, 2);
        break;
      case 64:
        n13 = jj_consume_token(64);
          n12 = JTBToolkit.makeNodeToken(n13);
          n9 = new NodeChoice(n12, 1, 2);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n8.addNode(n9);
      n14 = AddExp();
      n8.addNode(n14);
      n7.addNode(n8);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    {if (true) return new AddExp(n0, n6, n7);}
    throw new Error("Missing return statement in function");
  }

  final public MulExp MulExp() throws ParseException {
  // --- JTB generated node declarations ---
  PowExp n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  MulExp n12 = null;
    n0 = PowExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOD:
    case 65:
    case 66:
    case 67:
      n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 65:
        n5 = jj_consume_token(65);
          n4 = JTBToolkit.makeNodeToken(n5);
          n3 = new NodeChoice(n4, 0, 4);
        break;
      case 66:
        n7 = jj_consume_token(66);
          n6 = JTBToolkit.makeNodeToken(n7);
          n3 = new NodeChoice(n6, 1, 4);
        break;
      case 67:
        n9 = jj_consume_token(67);
          n8 = JTBToolkit.makeNodeToken(n9);
          n3 = new NodeChoice(n8, 2, 4);
        break;
      case MOD:
        n11 = jj_consume_token(MOD);
          n10 = JTBToolkit.makeNodeToken(n11);
          n3 = new NodeChoice(n10, 3, 4);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
      n12 = MulExp();
      n2.addNode(n12);
      n1.addNode(n2);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    {if (true) return new MulExp(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public PowExp PowExp() throws ParseException {
  // --- JTB generated node declarations ---
  ItemExp n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  PowExp n5 = null;
    n0 = ItemExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 68:
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(68);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = PowExp();
      n2.addNode(n5);
      n1.addNode(n2);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    {if (true) return new PowExp(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public ItemExp ItemExp() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Literal n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeChoice n6 = null;
  NodeList n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  Exp n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  Exp n17 = null;
  NodeListOptional n18 = null;
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  Exp n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeSequence n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  Exp n28 = null;
  NodeListOptional n29 = new NodeListOptional();
  NodeSequence n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  Exp n33 = null;
  NodeToken n34 = null;
  Token n35 = null;
  NodeSequence n36 = null;
  NodeToken n37 = null;
  Token n38 = null;
  Exp n39 = null;
  NodeToken n40 = null;
  Token n41 = null;
  NodeSequence n42 = null;
  NodeToken n43 = null;
  Token n44 = null;
  Exp n45 = null;
  NodeToken n46 = null;
  Token n47 = null;
  NodeSequence n48 = null;
  NodeToken n49 = null;
  Token n50 = null;
  ItemExp n51 = null;
  NodeSequence n52 = null;
  NodeToken n53 = null;
  Token n54 = null;
  ItemExp n55 = null;
  NodeSequence n56 = null;
  NodeToken n57 = null;
  Token n58 = null;
  ItemExp n59 = null;
  NodeSequence n60 = null;
  NodeToken n61 = null;
  Token n62 = null;
  ItemExp n63 = null;
  NodeSequence n64 = null;
  NodeToken n65 = null;
  Token n66 = null;
  ItemExp n67 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LITERAL:
    case REAL_LITERAL:
    case BOOL_LITERAL:
    case CHAR_LITERAL:
    case STRING_LITERAL:
      n1 = Literal();
      n0 = new NodeChoice(n1, 0, 10);
      break;
    case IDENTIFIER:
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(IDENTIFIER);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
      case 49:
        n7 = new NodeList();
        n18 = new NodeListOptional();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
          label_7:
          while (true) {
            n8 = new NodeSequence(3);
            n10 = jj_consume_token(49);
            n9 = JTBToolkit.makeNodeToken(n10);
            n8.addNode(n9);
            n11 = Exp();
            n8.addNode(n11);
            n13 = jj_consume_token(51);
            n12 = JTBToolkit.makeNodeToken(n13);
            n8.addNode(n12);
            n7.addNode(n8);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 49:
              ;
              break;
            default:
              jj_la1[39] = jj_gen;
              break label_7;
            }
          }
          n7.nodes.trimToSize();
          n6 = new NodeChoice(n7, 0, 2);
          break;
        case 46:
          n14 = new NodeSequence(4);
          n16 = jj_consume_token(46);
          n15 = JTBToolkit.makeNodeToken(n16);
          n14.addNode(n15);
          n17 = Exp();
          n14.addNode(n17);
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 47:
              ;
              break;
            default:
              jj_la1[40] = jj_gen;
              break label_8;
            }
            n19 = new NodeSequence(2);
            n21 = jj_consume_token(47);
            n20 = JTBToolkit.makeNodeToken(n21);
            n19.addNode(n20);
            n22 = Exp();
            n19.addNode(n22);
            n18.addNode(n19);
          }
          n18.nodes.trimToSize();
          n14.addNode(n18);
          n24 = jj_consume_token(48);
          n23 = JTBToolkit.makeNodeToken(n24);
          n14.addNode(n23);
          n6 = new NodeChoice(n14, 1, 2);
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        n5.addNode(n6);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      n2.addNode(n5);
      n0 = new NodeChoice(n2, 1, 10);
      break;
    case 46:
      n25 = new NodeSequence(4);
      n27 = jj_consume_token(46);
      n26 = JTBToolkit.makeNodeToken(n27);
      n25.addNode(n26);
      n28 = Exp();
      n25.addNode(n28);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 47:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_9;
        }
        n30 = new NodeSequence(2);
        n32 = jj_consume_token(47);
        n31 = JTBToolkit.makeNodeToken(n32);
        n30.addNode(n31);
        n33 = Exp();
        n30.addNode(n33);
        n29.addNode(n30);
      }
      n29.nodes.trimToSize();
      n25.addNode(n29);
      n35 = jj_consume_token(48);
      n34 = JTBToolkit.makeNodeToken(n35);
      n25.addNode(n34);
      n0 = new NodeChoice(n25, 2, 10);
      break;
    case 52:
      n36 = new NodeSequence(3);
      n38 = jj_consume_token(52);
      n37 = JTBToolkit.makeNodeToken(n38);
      n36.addNode(n37);
      n39 = Exp();
      n36.addNode(n39);
      n41 = jj_consume_token(53);
      n40 = JTBToolkit.makeNodeToken(n41);
      n36.addNode(n40);
      n0 = new NodeChoice(n36, 3, 10);
      break;
    case 49:
      n42 = new NodeSequence(3);
      n44 = jj_consume_token(49);
      n43 = JTBToolkit.makeNodeToken(n44);
      n42.addNode(n43);
      n45 = Exp();
      n42.addNode(n45);
      n47 = jj_consume_token(51);
      n46 = JTBToolkit.makeNodeToken(n47);
      n42.addNode(n46);
      n0 = new NodeChoice(n42, 4, 10);
      break;
    case SUMMATION:
      n48 = new NodeSequence(2);
      n50 = jj_consume_token(SUMMATION);
      n49 = JTBToolkit.makeNodeToken(n50);
      n48.addNode(n49);
      n51 = ItemExp();
      n48.addNode(n51);
      n0 = new NodeChoice(n48, 5, 10);
      break;
    case PRODUCT:
      n52 = new NodeSequence(2);
      n54 = jj_consume_token(PRODUCT);
      n53 = JTBToolkit.makeNodeToken(n54);
      n52.addNode(n53);
      n55 = ItemExp();
      n52.addNode(n55);
      n0 = new NodeChoice(n52, 6, 10);
      break;
    case COUNT:
      n56 = new NodeSequence(2);
      n58 = jj_consume_token(COUNT);
      n57 = JTBToolkit.makeNodeToken(n58);
      n56.addNode(n57);
      n59 = ItemExp();
      n56.addNode(n59);
      n0 = new NodeChoice(n56, 7, 10);
      break;
    case MAX:
      n60 = new NodeSequence(2);
      n62 = jj_consume_token(MAX);
      n61 = JTBToolkit.makeNodeToken(n62);
      n60.addNode(n61);
      n63 = ItemExp();
      n60.addNode(n63);
      n0 = new NodeChoice(n60, 8, 10);
      break;
    case MIN:
      n64 = new NodeSequence(2);
      n66 = jj_consume_token(MIN);
      n65 = JTBToolkit.makeNodeToken(n66);
      n64.addNode(n65);
      n67 = ItemExp();
      n64.addNode(n67);
      n0 = new NodeChoice(n64, 9, 10);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new ItemExp(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LITERAL:
      n2 = jj_consume_token(INT_LITERAL);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 5);
      break;
    case REAL_LITERAL:
      n4 = jj_consume_token(REAL_LITERAL);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 5);
      break;
    case BOOL_LITERAL:
      n6 = jj_consume_token(BOOL_LITERAL);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 5);
      break;
    case CHAR_LITERAL:
      n8 = jj_consume_token(CHAR_LITERAL);
      n7 = JTBToolkit.makeNodeToken(n8);
      n0 = new NodeChoice(n7, 3, 5);
      break;
    case STRING_LITERAL:
      n10 = jj_consume_token(STRING_LITERAL);
      n9 = JTBToolkit.makeNodeToken(n10);
      n0 = new NodeChoice(n9, 4, 5);
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Literal(n0);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OF)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PDLGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[46];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x100,0x200,0x400,0x0,0xfc900000,0x0,0x0,0x0,0xfc900000,0x0,0x7800,0x0,0xfc900000,0x0,0x7800,0x20000,0xfc900000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0xfc900000,0x100000,0x2c0000,0x2c0000,0x20000,0x20000,0x0,0x0,0x0,0x0,0x400000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0xf8000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x200,0x801242fc,0x2000,0x3,0x2003,0x801242fc,0x8000,0x4000,0x120000,0x805242fc,0x120000,0x0,0x0,0x805242fc,0x200,0x8000,0x200,0x4200,0x200,0x4000,0x2000000,0x0,0x801242fc,0x0,0x0,0x0,0x7d000000,0x7d000000,0x80000000,0x80000000,0x80000000,0x80000000,0x0,0x0,0x0,0x20000,0x8000,0x24000,0x24000,0x8000,0x1242f8,0xf8,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0xe,0xe,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PDLGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PDLGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PDLGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PDLGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PDLGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PDLGrammar(PDLGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PDLGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[69];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 46; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 69; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}


class MyVisitor extends DepthFirstVoidVisitor {

  /* --- User code --- */

  public void visit(NodeToken n) {
    System.out.println("visit " + n.tokenImage);
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token tok) {
    final NodeToken node = new NodeToken(tok.image.intern(), tok.kind, tok.beginLine, tok.beginColumn, tok.endLine, tok.endColumn);
    if (tok.specialToken == null)
      return node;
    Token t = tok;
    int nbt = 0;
    while (t.specialToken != null) {
      t = t.specialToken;
      nbt++;
    }
    final java.util.ArrayList<NodeToken> temp = new java.util.ArrayList<NodeToken>(nbt);
    t = tok;
    while (t.specialToken != null) {
      t = t.specialToken;
      temp.add(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
    }
    for (int i = nbt - 1; i >= 0; --i)
      node.addSpecial(temp.get(i));
    // node.trimSpecials();
    return node;
  }
}
