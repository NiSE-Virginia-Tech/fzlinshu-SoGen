/* Generated By:JavaCC: Do not edit this line. PDLGrammarConstants.java */
package grammar;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PDLGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INPUT = 7;
  /** RegularExpression Id. */
  int REQUIRED = 8;
  /** RegularExpression Id. */
  int OBJECTIVE = 9;
  /** RegularExpression Id. */
  int OUTPUT = 10;
  /** RegularExpression Id. */
  int INT = 11;
  /** RegularExpression Id. */
  int REAL = 12;
  /** RegularExpression Id. */
  int BOOL = 13;
  /** RegularExpression Id. */
  int CHAR = 14;
  /** RegularExpression Id. */
  int FUNCTION = 15;
  /** RegularExpression Id. */
  int OF = 16;
  /** RegularExpression Id. */
  int IN = 17;
  /** RegularExpression Id. */
  int AND = 18;
  /** RegularExpression Id. */
  int OR = 19;
  /** RegularExpression Id. */
  int NOT = 20;
  /** RegularExpression Id. */
  int XOR = 21;
  /** RegularExpression Id. */
  int MOD = 22;
  /** RegularExpression Id. */
  int IF = 23;
  /** RegularExpression Id. */
  int ELSE = 24;
  /** RegularExpression Id. */
  int FORALL = 25;
  /** RegularExpression Id. */
  int EXISTS = 26;
  /** RegularExpression Id. */
  int SUMMATION = 27;
  /** RegularExpression Id. */
  int PRODUCT = 28;
  /** RegularExpression Id. */
  int COUNT = 29;
  /** RegularExpression Id. */
  int MIN = 30;
  /** RegularExpression Id. */
  int MAX = 31;
  /** RegularExpression Id. */
  int MINIMIZE = 32;
  /** RegularExpression Id. */
  int MAXIMIZE = 33;
  /** RegularExpression Id. */
  int ALLDIFF = 34;
  /** RegularExpression Id. */
  int INT_LITERAL = 35;
  /** RegularExpression Id. */
  int REAL_LITERAL = 36;
  /** RegularExpression Id. */
  int BOOL_LITERAL = 37;
  /** RegularExpression Id. */
  int CHAR_LITERAL = 38;
  /** RegularExpression Id. */
  int STRING_LITERAL = 39;
  /** RegularExpression Id. */
  int FIXED_LITERAL = 40;
  /** RegularExpression Id. */
  int IDENTIFIER = 41;
  /** RegularExpression Id. */
  int LETTER = 42;
  /** RegularExpression Id. */
  int DIGIT = 43;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"#input\"",
    "\"#required\"",
    "\"#objective\"",
    "\"#output\"",
    "\"int\"",
    "\"real\"",
    "\"bool\"",
    "\"char\"",
    "\"function\"",
    "\"of\"",
    "\"in\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"xor\"",
    "\"mod\"",
    "\"if\"",
    "\"else\"",
    "\"forall\"",
    "\"exists\"",
    "\"summation\"",
    "\"product\"",
    "\"count\"",
    "\"min\"",
    "\"max\"",
    "\"minimize\"",
    "\"maximize\"",
    "\"alldiff\"",
    "<INT_LITERAL>",
    "<REAL_LITERAL>",
    "<BOOL_LITERAL>",
    "<CHAR_LITERAL>",
    "<STRING_LITERAL>",
    "<FIXED_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\";\"",
    "\"@\"",
    "\"(\"",
    "\",\"",
    "\")\"",
    "\"[\"",
    "\"~\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"?\"",
    "\"->\"",
    "\"=\"",
    "\":\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"\\\\\"",
    "\"^\"",
  };

}
